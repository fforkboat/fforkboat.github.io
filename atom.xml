<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://fforkboat.github.io</id>
    <title>fforkboat&apos;s dock</title>
    <updated>2020-08-10T03:15:17.750Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://fforkboat.github.io"/>
    <link rel="self" href="https://fforkboat.github.io/atom.xml"/>
    <subtitle>福柯船长的船坞</subtitle>
    <logo>https://fforkboat.github.io/images/avatar.png</logo>
    <icon>https://fforkboat.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, fforkboat&apos;s dock</rights>
    <entry>
        <title type="html"><![CDATA[Golang: GOPATH、package、module]]></title>
        <id>https://fforkboat.github.io/post/golang-gopathpackagemodule/</id>
        <link href="https://fforkboat.github.io/post/golang-gopathpackagemodule/">
        </link>
        <updated>2020-08-09T14:44:55.000Z</updated>
        <content type="html"><![CDATA[<h2 id="gopath">GOPATH</h2>
<p>GOPATH是Go工作区的路径，工作区内包含了三个文件夹：</p>
<ul>
<li>bin: 存放 <code>Go install</code>命令编译得到的可执行文件</li>
<li>pkg: 存放编译好的目标文件</li>
<li>src: 存放源代码</li>
</ul>
<p>我们可以同时指定多个GOPATH，以此获得多个工作区，Go build等命令会考虑所有的工作区</p>
<h2 id="package">package</h2>
<p>package(包)是在同一目录下的多个.go文件的集合。任何一个.go文件的第一行都会说明这个.go文件的package名，在同一个文件目录下的.go文件必须具有相同的package名，并且package名建议（但是不强制）和文件的目录名相同。</p>
<blockquote>
<p>注意，这里说“同一个文件目录下的.go文件必须具有相同的package名”是考虑将这一个文件目录当作一个包来使用的，我们会编译这个包，或者在其他地方引用这个包。但是如果你是出于练习玩耍的目的，当然是可以把具有不同package名的.go文件放在同一个目录下的，此时这个目录就没有包的语义了，它就只是一个存放文件的地方。</p>
</blockquote>
<h3 id="import和go-build">import和go build</h3>
<p>我们在一个go文件中可以直接使用同一个包中的public成员，当需要使用其他包中的成员时，就需要用到import语句。在非module模式下，import关键词后面跟着的是一个相对于<code>$GOPATH/src</code>的路径，这个路径的最后一个部分是一个目录，Go将会引入这个目录对应的包。比如<code>import github.com/foo/bar/tools</code>这条命令会引入tools这个目录对应的包，一般来说，这个包的名字和目录的名字相同，在这里也就是<code>tools</code>，接下来我们可以使用<code>tools.Xxx</code>来访问<code>tools</code>包中的成员。但是包的名字也可以和目录不同，如果tools目录下的.go文件的package名都为<code>weird</code>的话，那么我们就需要使用<code>weird.Xxx</code>来访问<code>weird</code>包的成员，这很容易让人感到疑惑，所以最好令包的名字和目录的名字相同。</p>
<p>go build有三种工作模式：</p>
<ol>
<li><code>go build go_file</code>: 编译一个.go文件</li>
<li><code>go build .</code>: 编译当前目录（不考虑子目录）的所有.go文件</li>
<li><code>go buid path_to_package</code>: 编译一个package（不考虑子package）的所有.go文件，这个package可以通过$GOPATH/src/path_to_package来找到</li>
</ol>
<h2 id="module">module</h2>
<p>module(模块)是Go 1.11引入的一个新的概念，一个模块是一些包的集合，这些包以树状模式组织。</p>
<p>我们通过<code>go mod init [module_name]</code>来创建一个模块，这条命令会在当前目录下创建一个go.mod文件，这个文件向go标识当前目录（和它的子目录）构成了一个模块。</p>
<p>在go.mod文件中我们可以写明该模块依赖的其他模块，然后通过go mod download命令来将这些模块下载到本地的缓存中，下载的位置不再是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi><mi>O</mi><mi>P</mi><mi>A</mi><mi>T</mi><mi>H</mi><mi mathvariant="normal">/</mi><mi>s</mi><mi>r</mi><mi>c</mi><mi mathvariant="normal">了</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">而</mi><mi mathvariant="normal">是</mi></mrow><annotation encoding="application/x-tex">GOPATH/src了，而是</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">G</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord">/</span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">c</span><span class="mord cjk_fallback">了</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">而</span><span class="mord cjk_fallback">是</span></span></span></span>GOPATH/pkg/mod。</p>
<p>在module模式下，import的规则发生了变化，import后面接着的不再是相对于<code>$GOPATH/src</code>的路径，而是<code>[module_name]/path/to/package</code>举个例子，考虑下面的模块结构，假设go.mod中规定的模块名为<code>example.com/my/a_repo</code>：</p>
<figure data-type="image" tabindex="1"><img src="https://fforkboat-markdown-img.oss-cn-hongkong.aliyuncs.com/imgimage-20200804164456186.png" alt="image-20200804164456186" loading="lazy"></figure>
<p>那我们在pkg1.go中引用pkg2包需要使用<code>import example.com/my/a_repo/pkg2</code>，引用Dragonboat 3.0中的config包需要使用<code>import github.com/lni/dragonboat/v3/config</code></p>
<p>在module模块下，<code>go build path_to_package</code>也发生了变化，和import规则一样，我们需要转为使用<code>go build [module_name]/path/to/package</code>。比如我们编译上图中的pkg2，则命令为: <code>go build example.com/my/a_repo/pkg2</code></p>
]]></content>
    </entry>
</feed>