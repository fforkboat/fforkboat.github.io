<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://fforkboat.github.io</id>
    <title>fforkboat&apos;s dock</title>
    <updated>2020-09-01T11:21:26.710Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://fforkboat.github.io"/>
    <link rel="self" href="https://fforkboat.github.io/atom.xml"/>
    <subtitle>福柯船长的船坞</subtitle>
    <logo>https://fforkboat.github.io/images/avatar.png</logo>
    <icon>https://fforkboat.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, fforkboat&apos;s dock</rights>
    <entry>
        <title type="html"><![CDATA[理解MVCC]]></title>
        <id>https://fforkboat.github.io/post/li-jie-mvcc/</id>
        <link href="https://fforkboat.github.io/post/li-jie-mvcc/">
        </link>
        <updated>2020-08-30T13:55:46.000Z</updated>
        <content type="html"><![CDATA[<h2 id="mvcc提供的抽象">MVCC提供的抽象</h2>
<p>MVCC为我们提供了这样的一种抽象：</p>
<p>系统中存在数据库的多个副本（或者说快照），事务的读操作（select操作）都发生在事务自身的副本之上，这样一来，读操作就不需要上锁，因此允许读写的并发，当然写写还是不能并发的。</p>
<p>在RC模式下，每次读都会创建一份快照，因此可以读取到其他事务新提交的数据，而在RR模式下，只有第一次读的时候会创建快照，之后读都是读这份快照。</p>
<p>这样看起来，RR模式下并不存在什么幻读的问题，因为事务总是读取自己的快照。但是需要注意的是，数据库中其实存在两种类型的读，快照读和当前读。select读属于快照读，快照读确实不存在幻读的问题。而增删改属于当前读，在更新数据的时候其实也是需要读取数据的，而且读取的不是快照信息，而是最新信息，虽然在更新的时候会上行锁，以此保证同一行最多只能同时被一个事务修改（当前读），但是单纯的行锁没有办法锁定行间隙，因此会出现幻读的情况，举个例子，假设有两个同时在执行的事务A、B，事务A中执行一条更新语句: <code>UPDATE products SET name='test' where stock=3</code>，这条更新语句会把所有stock=3的行的name设置为'test'，并且把这些行锁定，事务B就无法更新这些行了（会被阻塞），但是如果没有间隙锁，我们还是可以执行<code>INSERT INTO products(name, stock) VALUES ('not test', 3)</code>，这样就会插入新的一行，它的stock=3，但是name不是'test'，那么假设我们再在事务A中执行一遍刚才的UPDATE语句，此时返回的所影响的行的数目就会比上一次执行多了一行，这就出现了幻读。所以在RR模式下，我们需要间隙锁加行锁一起工作，来消除幻读的问题。</p>
<h2 id="mvcc的实现">MVCC的实现</h2>
<p>版本列、undo log、<code>ReadView</code></p>
<p>版本列：每一行都有一个隐藏列，用于记录这一行的版本，它存储的实际值是最后一次修改该行的事务id</p>
<p>undo log：每一行有另一个隐藏列，用于记录上一版本的位置</p>
<p><code>ReadView</code>：很像数据库的视图，都是提供了一个看待底层数据的角度，角度不同，看到的数据也就不同。从逻辑上说<code>ReadView</code>就是对数据库的一份快照。RC模式下，每次读都会创建一个<code>ReadView</code>，而RR模式下，事务第一次读时会创建一个<code>ReadView</code></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[HTTP]]></title>
        <id>https://fforkboat.github.io/post/http/</id>
        <link href="https://fforkboat.github.io/post/http/">
        </link>
        <updated>2020-08-30T10:17:36.000Z</updated>
        <content type="html"><![CDATA[<h2 id="http-报文结构">HTTP 报文结构</h2>
<h3 id="http请求">HTTP请求</h3>
<p>一个HTTP请求报文由四个部分组成：请求行、请求头部、空行、请求数据。</p>
<h4 id="请求行">请求行</h4>
<p>请求行由请求方法字段、URL字段和HTTP协议版本字段3个字段组成，它们用空格分隔。比如 GET /data/info.html HTTP/1.1</p>
<p>方法字段就是HTTP使用的请求方法，比如常见的GET/POST</p>
<p>其中HTTP协议版本有两种：HTTP1.0/HTTP1.1 可以这样区别：</p>
<p>HTTP1.0对于每个连接都只能传送一个请求和响应，请求就会关闭，HTTP1.0没有Host字段;而HTTP1.1在同一个连接中可以传送多个请求和响应，多个请求可以重叠和同时进行，HTTP1.1必须有Host字段。</p>
<h4 id="请求头">请求头</h4>
<p>HTTP客户程序(例如<a href="https://www.2cto.com/os/liulanqi/">浏览器</a>)，向服务器发送请求的时候必须指明请求类型(一般是GET或者 POST)。如有必要，客户程序还可以选择发送其他的请求头。大多数请求头并不是必需的，但Content-Length除外。对于POST请求来说 Content-Length必须出现。</p>
<p>常见的请求头字段含义：</p>
<p>Accept： 浏览器可接受的MIME类型。</p>
<p>Accept-Charset：浏览器可接受的字符集。</p>
<p>Accept-Encoding：浏览器能够进行解码的数据编码方式，比如gzip。Servlet能够向支持gzip的浏览器返回经gzip编码的HTML页面。许多情形下这可以减少5到10倍的下载时间。</p>
<p>Accept-Language：浏览器所希望的语言种类，当服务器能够提供一种以上的语言版本时要用到。</p>
<p>Authorization：授权信息，通常出现在对服务器发送的WWW-Authenticate头的应答中。</p>
<p>Content-Length：表示请求消息正文的长度。</p>
<p>Host： 客户机通过这个头告诉服务器，想访问的主机名。Host头域指定请求资源的Intenet主机和端口号，必须表示请求url的原始服务器或网关的位置。HTTP/1.1请求必须包含主机头域，否则<a href="https://www.2cto.com/os/">系统</a>会以400状态码返回。</p>
<p>If-Modified-Since：客户机通过这个头告诉服务器，资源的缓存时间。只有当所请求的内容在指定的时间后又经过修改才返回它，否则返回304“Not Modified”应答。</p>
<p>Referer：客户机通过这个头告诉服务器，它是从哪个资源来访问服务器的(防盗链)。包含一个URL，用户从该URL代表的页面出发访问当前请求的页面。</p>
<p>User-Agent：User-Agent头域的内容包含发出请求的用户信息。浏览器类型，如果Servlet返回的内容与浏览器类型有关则该值非常有用。</p>
<p>Cookie：客户机通过这个头可以向服务器带数据，这是最重要的请求头信息之一。</p>
<p>Pragma：指定“no-cache”值表示服务器必须返回一个刷新后的文档，即使它是代理服务器而且已经有了页面的本地拷贝。</p>
<p>From：请求发送者的email地址，由一些特殊的Web客户程序使用，浏览器不会用到它。</p>
<p>Connection：处理完这次请求后是否断开连接还是继续保持连接。如果Servlet看到这里的值为“Keep- Alive”，或者看到请求使用的是HTTP 1.1(HTTP 1.1默认进行持久连接)，它就可以利用持久连接的优点，当页面包含多个元素时(例如Applet，图片)，显著地减少下载所需要的时间。要实现这一点，Servlet需要在应答中发送一个Content-Length头，最简单的实现方法是：先把内容写入 ByteArrayOutputStream，然后在正式写出内容之前计算它的大小。</p>
<p>Range：Range头域可以请求实体的一个或者多个子范围。例如，</p>
<p>表示头500个字节：bytes=0-499</p>
<p>表示第二个500字节：bytes=500-999</p>
<p>表示最后500个字节：bytes=-500</p>
<p>表示500字节以后的范围：bytes=500-</p>
<p>第一个和最后一个字节：bytes=0-0,-1</p>
<p>同时指定几个范围：bytes=500-600,601-999</p>
<p>但是服务器可以忽略此请求头，如果无条件GET包含Range请求头，响应会以状态码206(PartialContent)返回而不是以200 (OK)。</p>
<p>UA-Pixels，UA-Color，UA-OS，UA-CPU：由某些版本的IE浏览器所发送的非标准的请求头，表示屏幕大小、颜色深度、操作系统和CPU类型。</p>
<h4 id="请求数据请求体">请求数据（请求体）</h4>
<p>请求体可以携带任意的业务数据</p>
<h3 id="http响应">HTTP响应</h3>
<h4 id="响应行">响应行</h4>
<p>响应行一般由协议版本、状态码及其描述组成 比如 HTTP/1.1 200 OK</p>
<p>其中协议版本HTTP/1.1或者HTTP/1.0，200就是它的状态码，OK则为它的描述。</p>
<p>//常见状态码：</p>
<p>100~199：表示成功接收请求，要求客户端继续提交下一次请求才能完成整个处理过程。</p>
<p>200~299：表示成功接收请求并已完成整个处理过程。常用200</p>
<p>300~399：为完成请求，客户需进一步细化请求。例如：请求的资源已经移动一个新地址、常用302(意味着你请求我，我让你去找别人),307和304(我不给你这个资源，自己拿缓存)</p>
<p>400~499：客户端的请求有错误，常用404(意味着你请求的资源在web服务器中没有)403(服务器拒绝访问，权限不够)</p>
<p>500~599：服务器端出现错误，常用500</p>
<h4 id="响应头">响应头</h4>
<p>响应头用于描述服务器的基本信息，以及数据的描述，服务器通过这些数据的描述信息，可以通知客户端如何处理等一会儿它回送的数据。</p>
<p>设置HTTP响应头往往和状态码结合起来。例如，有好几个表示“文档位置已经改变”的状态代码都伴随着一个Location头，而401(Unauthorized)状态代码则必须伴随一个WWW-Authenticate头。然而，即使在没有设置特殊含义的状态代码时，指定应答头也是很有用的。应答头可以用来完成：设置Cookie，指定修改日期，指示浏览器按照指定的间隔刷新页面，声明文档的长度以便利用持久HTTP连接，……等等许多其他任务。</p>
<p>常见的响应头字段含义：</p>
<p>Allow：服务器支持哪些请求方法(如GET、POST等)。</p>
<p>Content-Encoding：文档的编码(Encode)方法。只有在解码之后才可以得到Content-Type头指定的内容类型。利用gzip压缩文档能够显著地减少HTML文档的下载时间。<a href="https://www.2cto.com/kf/ware/Java/">Java</a>的GZIPOutputStream可以很方便地进行gzip压缩，但只有Unix上的Netscape和Windows上的IE4、IE5才支持它。因此，Servlet应该通过查看Accept-Encoding头(即request.getHeader(“Accept- Encoding”))检查浏览器是否支持gzip，为支持gzip的浏览器返回经gzip压缩的HTML页面，为其他浏览器返回普通页面。</p>
<p>Content-Length：表示内容长度。只有当浏览器使用持久HTTP连接时才需要这个数据。如果你想要利用持久连接的优势，可以把输出文档写入 ByteArrayOutputStram，完成后查看其大小，然后把该值放入Content-Length头，最后通过byteArrayStream.writeTo(response.getOutputStream()发送内容。</p>
<p>Content- Type：表示后面的文档属于什么MIME类型。Servlet默认为text/plain，但通常需要显式地指定为text/html。由于经常要设置 Content-Type，因此HttpServletResponse提供了一个专用的方法setContentType。</p>
<p>Date：当前的GMT时间，例如，Date:Mon,31Dec200104:25:57GMT。Date描述的时间表示世界标准时，换算成本地时间，需要知道用户所在的时区。你可以用setDateHeader来设置这个头以避免转换时间格式的麻烦。</p>
<p>Expires：告诉浏览器把回送的资源缓存多长时间，-1或0则是不缓存。</p>
<p>Last-Modified：文档的最后改动时间。客户可以通过If-Modified-Since请求头提供一个日期，该请求将被视为一个条件GET，只有改动时间迟于指定时间的文档才会返回，否则返回一个304(Not Modified)状态。Last-Modified也可用setDateHeader方法来设置。</p>
<p>Location：这个头配合302状态码使用，用于重定向接收者到一个新URI地址。表示客户应当到哪里去提取文档。Location通常不是直接设置的，而是通过HttpServletResponse的sendRedirect方法，该方法同时设置状态代码为302。</p>
<p>Refresh：告诉浏览器隔多久刷新一次，以秒计。</p>
<p>Server：服务器通过这个头告诉浏览器服务器的类型。Server响应头包含处理请求的原始服务器的软件信息。此域能包含多个产品标识和注释，产品标识一般按照重要性排序。Servlet一般不设置这个值，而是由Web服务器自己设置。</p>
<p>Set-Cookie：设置和页面关联的Cookie。Servlet不应使用response.setHeader(“Set-Cookie”, …)，而是应使用HttpServletResponse提供的专用方法addCookie。</p>
<p>Transfer-Encoding：告诉浏览器数据的传送格式。</p>
<p>WWW-Authenticate：客户应该在Authorization头中提供什么类型的授权信息?在包含401(Unauthorized)状态行的应答中这个头是必需的。例如，response.setHeader(“WWW-Authenticate”, “BASIC realm=\”executives\”“)。注意Servlet一般不进行这方面的处理，而是让Web服务器的专门机制来控制受密码保护页面的访问。</p>
<p>注：设置应答头最常用的方法是HttpServletResponse的setHeader，该方法有两个参数，分别表示应答头的名字和值。和设置状态代码相似，设置应答头应该在发送任何文档内容之前进行。</p>
<p>setDateHeader方法和setIntHeadr方法专门用来设置包含日期和整数值的应答头，前者避免了把Java时间转换为GMT时间字符串的麻烦，后者则避免了把整数转换为字符串的麻烦。</p>
<p>HttpServletResponse还提供了许多设置</p>
<p>setContentType：设置Content-Type头。大多数Servlet都要用到这个方法。</p>
<p>setContentLength：设置Content-Length头。对于支持持久HTTP连接的浏览器来说，这个函数是很有用的。</p>
<p>addCookie：设置一个Cookie(Servlet API中没有setCookie方法，因为应答往往包含多个Set-Cookie头)。</p>
<h2 id="get和post请求">GET和POST请求</h2>
<h3 id="http的早期使用">HTTP的早期使用</h3>
<p>HTTP最早出现是为了处理浏览器和WEB服务器的交互，当时的交互很简单，基本就只有客户端向服务器请求静态资源和提交表单，GET和POST就分别用于这两个操作。</p>
<p>POST请求中，表单的数据被编码到HTTP请求体中，编码主要又两种格式：</p>
<ul>
<li>application/x-www-form-urlencoded: 用来传输简单的数据，大概就是 &quot;key1=value1&amp;key2=value2&quot;这样的格式</li>
<li>multipart/form-data: 用于上传文件</li>
</ul>
<h3 id="在接口传输中的使用">在接口传输中的使用</h3>
<p>但是随着技术的发展，HTTP慢慢被拓展到了接口传输的场景中，此时不仅仅只有浏览器能够自动发送HTTP请求了，我们可以通过各种工具（比如ajax、各种语言提供的HTTP请求库）自己构建一个HTTP请求，我们想发什么就发什么，只要请求格式符合HTTP的报文结构就好，但是太自由也会带来麻烦，于是就有了各种接口规范，其中最著名的就是RESTful。</p>
<p>在RESTful的规定下，GET和POST的语义发生了变化，GET用于访问一个资源，POST用于创建一个资源，另外还有PUT用于替换一个资源，DELETE用于删除一个资源。</p>
<h2 id="get请求的查询参数">GET请求的查询参数</h2>
<p>在早期的应用场景中，HTTP请求由浏览器自动生成，而在浏览器中，GET请求只能由一个URL触发，比如用户点击一个链接，因此当时为了携带参数的话只能使用URL上的querystring，而HTTP协议本身并没有这样的限制，所以在基于接口的使用场景中，我们用工具构建的GET请求是可以拥有request body，一个周知的例子就是Elastic Search就使用了带request body的GET请求。</p>
<p>不过虽然可以将GET请求的参数放在request body中，但是大家一般不这么做，因为将参数放在URL中已经成了一种传统</p>
<h2 id="关于安全性">关于安全性</h2>
<p>无论是GET还是POST请求，实际传输的都是HTTP请求报文段，而它是明文传播的，所以HTTP是一种不安全的协议，请求和响应都是可以被抓包窃取的。</p>
<p>为了保证安全，我们需要加密请求和响应，通行的做法是使用HTTPS，即在HTTP协议下方再加一个SSL协议，来加密HTTP的数据报。</p>
<h2 id="浏览器的post需要发两个请求吗">浏览器的POST需要发两个请求吗？</h2>
<p>上文中的&quot;HTTP  格式“清楚的显示了HTTP请求可以被大致分为“请求头”和“请求体”两个部分。使用HTTP时大家会有一个约定，即所有的“控制类”信息应该放在请求头中，具体的数据放在请求体里“。于是服务器端在解析时，总是会先完全解析全部的请求头部。这样，服务器端总是希望能够了解请求的控制信息后，就能决定这个请求怎么进一步处理，是拒绝，还是根据content-type去调用相应的解析器处理数据，或者直接用zero copy转发。</p>
<p>比如在用Java写服务时，请求处理代码总是能从HttpSerlvetRequest里getParameter/Header/url。这些信息都是请求头里的，框架直接就解析了。而对于请求体，只提供了一个inputstream，如果开发人员觉得应该进一步处理，就自己去读取和解析请求体。这就能体现出服务器端对请求头和请求体的不同处理方式。</p>
<p>举个实际的例子，比如写一个上传文件的服务，请求url中包含了文件名称，请求体中是个尺寸为几百兆的压缩二进制流。服务器端接收到请求后，就可以先拿到请求头部，查看用户是不是有权限上传，文件名是不是符合规范等。如果不符合，就不再处理请求体的数据了，直接丢弃。而不用等到整个请求都处理完了再拒绝。</p>
<p>为了进一步优化，客户端可以利用HTTP的Continued协议来这样做：客户端总是先发送所有请求头给服务器，让服务器校验。如果通过了，服务器回复“100 - Continue”，客户端再把剩下的数据发给服务器。如果请求被拒了，服务器就回复个400之类的错误，这个交互就终止了。这样，就可以避免浪费带宽传请求体。但是代价就是会多一次Round Trip。如果刚好请求体的数据也不多，那么一次性全部发给服务器可能反而更好。</p>
<p>基于此，客户端就能做一些优化，比如内部设定一次POST的数据超过1KB就先只发“请求头”，否则就一次性全发。客户端甚至还可以做一些Adaptive的策略，统计发送成功率，如果成功率很高，就总是全部发等等。不同浏览器，不同的客户端（curl，postman）可以有各自的不同的方案。不管怎样做，优化目的总是在提高数据吞吐和降低带宽浪费上做一个折衷。</p>
<p>因此到底是发一次还是发N次，客户端可以很灵活的决定。因为不管怎么发都是符合HTTP协议的，因此我们应该视为这种优化是一种实现细节，而不用扯到GET和POST本身的区别上。更不要当个什么世纪大发现。</p>
<h2 id="参考资料">参考资料</h2>
<p><a href="https://www.cnblogs.com/ldq2016/p/9055933.html">HTTP请求/响应报文结构 - 一点点征服 - 博客园</a></p>
<p><a href="https://www.zhihu.com/question/28586791/answer/767316172">GET 和 POST 到底有什么区别？ - 知乎</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[二分查找的正确写法]]></title>
        <id>https://fforkboat.github.io/post/er-fen-cha-zhao-de-zheng-que-xie-fa/</id>
        <link href="https://fforkboat.github.io/post/er-fen-cha-zhao-de-zheng-que-xie-fa/">
        </link>
        <updated>2020-08-30T08:09:50.000Z</updated>
        <content type="html"><![CDATA[<p>想要写好一个二分查找的算法，重点在于思考清楚left和right所表示的含义，并且在while循环中更新它们时不能改变它们的含义（其实就是循环不变式的特性）。</p>
<p>拿最简单的场景举个例子：从一个有序数组中查找一个值的索引，如果没有这个值，就返回-1</p>
<p>在这道题目中，我最喜欢的做法是：</p>
<p>令left和right分别表示搜索空间的下界和上界，我们要找的值只可能存在于[left, right]这个区间中，那么只要left &lt;= right，就表示这个区间中还有元素，我们就需要继续搜索，那么while循环的条件应该是<code>while (left &lt;= right)</code>。而left和right的初值自然分别是0和length-1</p>
<ul>
<li>
<p>当values[mid] &gt; target时，易得target元素只可能出现在[left, mid - 1]中，所以为了继续维持right的下界含义，我们应该令right = mid - 1。</p>
</li>
<li>
<p>当values[mid] &lt; target时，易得target元素只可能出现在[mid + 1, right]中，同理，我们应该令left = mid +  1。</p>
</li>
<li>
<p>当values[mid] == target时，直接返回mid。</p>
</li>
</ul>
<p>如果循环退出，表示已经没有元素可以搜索了，而此时还没有找到target的话就永远找不到了，所以应该返回-1</p>
<p>再举个复杂点的例子：从一个有序数组中找到第一个大于或者等于target的值的索引</p>
<p>此时，我喜欢的做法是：</p>
<p>同样的，维护一个区间[left, right]，我们要找的元素只可能存在于[left, right]之间，在while循环的内部，不断更新left和right的值，<strong>直到区间的长度为1时退出</strong>，此时判断区间中唯一的元素是不是我们要找的值。</p>
<p>令left和right的初始值分别为0, length - 1，循环的条件是<code>while(left &lt; right)</code></p>
<ul>
<li>当values[mid] &gt; target，right = mid - 1</li>
<li>当values[mid] &lt; target，left = mid + 1</li>
<li>当values[mid] == target，因为我们要找第一个符合条件的值，此时它只可能存在于[left, mid]中，所以我们令right = mid</li>
</ul>
<p>但是要注意的是，如果要找的是最后一个等于target的值的索引，那么当values[mid] == target时，按理说符合条件的值只可能出现在[mid, right]中，那么我们应该令left = mid，但是当区间中只有两个元素，即right = left + 1时，left已经是等于mid的了，如果还这样赋值的话就永远无法退出循环，因此需要特殊处理一下。</p>
<p>上面这个例子还有另外一种解法：</p>
<p>此时left, right表示的意义和上面的不同。left表示一个索引，它可能就是我们所需要寻找的目标索引，当left还可能被更新到一个更大的值时才继续循环，我们令right为这样的一个屏障，当left &lt;= right时，left才有可能继续更新、才能够继续循环。</p>
<p>那么left的初值为0，right的初值为length-1，循环条件为<code>while(left &lt; right)</code></p>
<ul>
<li>当values[mid] &lt; target时，left可以被更新到mid + 1</li>
<li>当values[mid] &gt; target时，right可以被更新到mid - 1</li>
<li>当values[mid] == target时，left只有在left &lt;= mid-1时，才可能更新到一个更大的值（即mid），所以right应该被更新为mid - 1</li>
</ul>
<p>这种解法代码写起来容易一点，但是要搞清left和right的真实含义就有点困难了，有时或许你写的是对的，但是其实你并不是真的明白它为什么是对的。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[select、poll、epoll]]></title>
        <id>https://fforkboat.github.io/post/selectpollepoll/</id>
        <link href="https://fforkboat.github.io/post/selectpollepoll/">
        </link>
        <updated>2020-08-28T15:31:41.000Z</updated>
        <content type="html"><![CDATA[<p>select, poll, epoll是Linux提供的三个用于IO多路复用的系统调用，被封装在C函数中</p>
<h2 id="select">select</h2>
<p>在传统的网络编程中，我们为每一个连接分配一个线程，当并发连接达到一定数量时，线程占用的空间会超出存储空间的限制。在基于IO多路复用的新式架构下，我们可以使用一个或者很少数量的线程来管理连接，来监控所有socket的可读写状态，select可以同时监控多个文件描述符的状态，一旦发现任意一个描述符准备好了，就立即返回，并通知应用程序。</p>
<p>select的问题在于:</p>
<ol>
<li>能够传入select的socket数组容量有限，只有1024个；这一点在poll中被解决了(poll也只改进了这一点)</li>
<li>每一次调用都需要传入感兴趣的文件描述符数组，这个数组会被复制到内核空间中，内核每次都需要扫描和分析它们，文件描述符的数量越多，复制和处理花的时间也就越长，所以它们的工作效率和可拓展性不是很好。</li>
<li>只要有一个socket可读了，所有的socket都会被扫描一遍来收集它们的可读信息</li>
</ol>
<h2 id="epoll">epoll</h2>
<p>对于select的问题2，epoll的解决方法是：</p>
<p>提供三个函数，分别用于创建一个类似session的东西、向session传递文件描述符、阻塞的监控多个文件描述符。也就是说我们的FD（文件描述符）只需要传递和分析一次，以后只需要指定session的号码就行了。</p>
<p>对于问题3：</p>
<p>epoll中添加了一个read list，用于存放可读的socket，当线程被唤醒后只需要遍历这个read list就可以了。</p>
<h2 id="参考资料">参考资料</h2>
<p>https://cloud.tencent.com/developer/article/1005481</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MD5]]></title>
        <id>https://fforkboat.github.io/post/md5/</id>
        <link href="https://fforkboat.github.io/post/md5/">
        </link>
        <updated>2020-08-21T10:21:36.000Z</updated>
        <content type="html"><![CDATA[<p>MD5是一种算法，可以对任意长度的输入计算一个固定长度（16个字节）的输出，常用于加密、数字签名。</p>
<h2 id="用途">用途</h2>
<h3 id="密码管理">密码管理</h3>
<p>当我们需要保存某些密码信息以用于身份确认时，如果直接将密码信息以明码方式保存在数据库中，不使用任何保密措施，系统管理员就很容易能得到原来的密码信息，这些信息一旦泄露， 密码也很容易被破译。为了增加安全性，有必要对<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93/103728">数据库</a>中需要保密的信息进行加密，这样，即使有人得到了整个数据库，如果没有解密算法，也不能得到原来的密码信息。MD5算法可以很好地解决这个问题，因为它可以将任意长度的输入串经过计算得到固定长度的输出，而且只有在明文相同的情况下，才能等到相同的密文，并且这个算法是不可逆的，即便得到了加密以后的密文，也不可能通过解密算法反算出明文。这样就可以把用户的密码以MD5值（或类似的其它算法）的方式保存起来，用户注册的时候，系统是把用户输入的密码计算成 MD5 值，然后再去和系统中保存的 MD5 值进行比较，如果密文相同，就可以认定密码是正确的，否则密码错误。通过这样的步骤，系统在并不知道用户密码明码的情况下就可以确定用户登录系统的合法性。这样不但可以避免用户的密码被具有系统管理员权限的用户知道，而且还在一定程度上增加了密码被破解的难度  。</p>
<h3 id="电子签名">电子签名</h3>
<p>MD5 算法还可以作为一种<a href="https://baike.baidu.com/item/%E7%94%B5%E5%AD%90%E7%AD%BE%E5%90%8D/305853">电子签名</a>的方法来使用，使用 MD5算法就可以为任何文件（不管其大小、格式、数量）产生一个独一无二的“数字指纹”，借助这个“数字指纹”，通过检查文件前后 MD5 值是否发生了改变，就可以知道源文件是否被改动。我们在下载软件的时候经常会发现，软件的下载页面上除了会提供软件的下载地址以外，还会给出一串长长的字符串。这串字符串其实就是该软件的MD5 值，它的作用就在于下载该软件后，对下载得到的文件用专门的软件（如 Windows MD5 check 等）做一次 MD5 校验，以确保我们获得的文件与该站点提供的文件为同一文件。利用 MD5 算法来进行文件校验的方案被大量应用到软件下载站、论坛数据库、系统文件安全等方面 。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[B树和B+树]]></title>
        <id>https://fforkboat.github.io/post/b-shu-he-bshu/</id>
        <link href="https://fforkboat.github.io/post/b-shu-he-bshu/">
        </link>
        <updated>2020-08-21T10:18:18.000Z</updated>
        <content type="html"><![CDATA[<p>B树和B+树都是一种常用于磁盘索引的数据结构，它们的本质是多路平衡搜索树。相比于二叉搜索树，它们的每个节点可以存储更多的关键词，因此它们的整体结构会更加的矮胖，同时，多关键词的节点能够让它们在搜索的过程中减少磁盘IO的次数，提高搜索的性能。</p>
<h2 id="二者的区别">二者的区别</h2>
<p>B树和二叉搜索树比较类似，每个节点既需要保存索引值，又需要保存索引所在的数据行信息。而在B+树中，中间节点只会保存索引值，并且这些索引值都出现在子节点中，是子节点的最大（或最小）元素，因此叶子节点中会保存所有的索引值，除此之外，叶子节点还会保存索引所在的数据行信息。聚簇索引中直接保存行数据内容，而非聚簇索引中保存指向行的指针。</p>
<p>B+树的叶子节点会指向下一个叶子节点，整体上形成一个列表，在这个链表上，索引值从小到大顺序排布。这样的结构非常适合获取有序的结果集，并且获取范围数据只需要遍历链表就可以了，而在B树上需要先找到范围下界索引，再进行中序遍历找到范围上界索引。</p>
<p>总结起来，B+树的优势在于：</p>
<ol>
<li>IO次数更少：因为中间节点不需要保存行数据，可以存储更多的索引值</li>
<li>查询性能稳定：每次都需要遍历到叶子节点，而B树可能在中间就停下了</li>
<li>范围查找更加方便</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Golang: GOPATH、package、module]]></title>
        <id>https://fforkboat.github.io/post/golang-gopathpackagemodule/</id>
        <link href="https://fforkboat.github.io/post/golang-gopathpackagemodule/">
        </link>
        <updated>2020-08-09T14:44:55.000Z</updated>
        <content type="html"><![CDATA[<h2 id="gopath">GOPATH</h2>
<p>GOPATH是Go工作区的路径，工作区内包含了三个文件夹：</p>
<ul>
<li>bin: 存放 <code>Go install</code>命令编译得到的可执行文件</li>
<li>pkg: 存放编译好的目标文件</li>
<li>src: 存放源代码</li>
</ul>
<p>我们可以同时指定多个GOPATH，以此获得多个工作区，Go build等命令会考虑所有的工作区</p>
<h2 id="package">package</h2>
<p>package(包)是在同一目录下的多个.go文件的集合。任何一个.go文件的第一行都会说明这个.go文件的package名，在同一个文件目录下的.go文件必须具有相同的package名，并且package名建议（但是不强制）和文件的目录名相同。</p>
<blockquote>
<p>注意，这里说“同一个文件目录下的.go文件必须具有相同的package名”是考虑将这一个文件目录当作一个包来使用的，我们会编译这个包，或者在其他地方引用这个包。但是如果你是出于练习玩耍的目的，当然是可以把具有不同package名的.go文件放在同一个目录下的，此时这个目录就没有包的语义了，它就只是一个存放文件的地方。</p>
</blockquote>
<h3 id="import和go-build">import和go build</h3>
<p>我们在一个go文件中可以直接使用同一个包中的public成员，当需要使用其他包中的成员时，就需要用到import语句。在非module模式下，import关键词后面跟着的是一个相对于<code>$GOPATH/src</code>的路径，这个路径的最后一个部分是一个目录，Go将会引入这个目录对应的包。比如<code>import github.com/foo/bar/tools</code>这条命令会引入tools这个目录对应的包，一般来说，这个包的名字和目录的名字相同，在这里也就是<code>tools</code>，接下来我们可以使用<code>tools.Xxx</code>来访问<code>tools</code>包中的成员。但是包的名字也可以和目录不同，如果tools目录下的.go文件的package名都为<code>weird</code>的话，那么我们就需要使用<code>weird.Xxx</code>来访问<code>weird</code>包的成员，这很容易让人感到疑惑，所以最好令包的名字和目录的名字相同。</p>
<p>go build有三种工作模式：</p>
<ol>
<li><code>go build go_file</code>: 编译一个.go文件</li>
<li><code>go build .</code>: 编译当前目录（不考虑子目录）的所有.go文件</li>
<li><code>go buid path_to_package</code>: 编译一个package（不考虑子package）的所有.go文件，这个package可以通过$GOPATH/src/path_to_package来找到</li>
</ol>
<h2 id="module">module</h2>
<p>module(模块)是Go 1.11引入的一个新的概念，一个模块是一些包的集合，这些包以树状模式组织。</p>
<p>我们通过<code>go mod init [module_name]</code>来创建一个模块，这条命令会在当前目录下创建一个go.mod文件，这个文件向go标识当前目录（和它的子目录）构成了一个模块。</p>
<p>在go.mod文件中我们可以写明该模块依赖的其他模块，然后通过go mod download命令来将这些模块下载到本地的缓存中，下载的位置不再是<code>$GOPATH/src</code>了，而是<code>$GOPATH/pkg/mod</code>。</p>
<p>在module模式下，import的规则发生了变化，import后面接着的不再是相对于<code>$GOPATH/src</code>的路径，而是<code>[module_name]/path/to/package</code>举个例子，考虑下面的模块结构，假设go.mod中规定的模块名为<code>example.com/my/a_repo</code>：</p>
<figure data-type="image" tabindex="1"><img src="https://fforkboat-markdown-img.oss-cn-hongkong.aliyuncs.com/imgimage-20200804164456186.png" alt="image-20200804164456186" loading="lazy"></figure>
<p>那我们在pkg1.go中引用pkg2包需要使用<code>import example.com/my/a_repo/pkg2</code>，引用Dragonboat 3.0中的config包需要使用<code>import github.com/lni/dragonboat/v3/config</code></p>
<p>在module模块下，<code>go build path_to_package</code>也发生了变化，和import规则一样，我们需要转为使用<code>go build [module_name]/path/to/package</code>。比如我们编译上图中的pkg2，则命令为: <code>go build example.com/my/a_repo/pkg2</code></p>
]]></content>
    </entry>
</feed>